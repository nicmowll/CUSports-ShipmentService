openapi: '3.0.0'
info:
  version: '1'
  title: 'Shipping API'
  description: 'Manage the picking, packing, and shipping of all orders'

servers:
  - url: https://cusports.com

paths:
  /shipments:
    get:
      summary: Retrieve all shipments
      description: >
        Returns a list of all shipments. 
        Takes two query parameters, status and userID.
        Querying by status will return all shipments with that current status, 
        and querying by userID will return all shipments for that specific user.
      parameters:
        - name: status
          description: The status of shipping (processing, shipped, or delivered)
          in: query
          schema:
            $ref: '#/components/schemas/Status'
        - name: userID
          description: Retrieve shipment if userID matches the string
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A list of all shipments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shipment'
        '404':
          description: List of shipments could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add shipments
      description: >
        Adds a new shipment to the database. Takes a Shipment representation as 
        the body, and returns a success message if successfully added.
      requestBody:
        description: Representation of all the data within a specific shipment.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Sucessfully added a shipment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Content of request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Bulk update shipments
      description: > 
        Let's a user update shipments in bulk.
        The shipments to be updated will be supplied in the request
        body. 
      requestBody:
        description: Representation of all the data within a specific shipment.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: "Successfully updated shipments"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: "Invalid update request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "Unexpected server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  

  /shipments/{shipmentID}:
    parameters:
      - name: shipmentID
        description: The unique identifier of shipment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ShipmentID'
    get:
      summary: Retrieve a shipment by ID
      description: Returns a shipment based on the shipment ID provided.
      responses:
        '200':
          description: The shipment corresponding to the provided `shipmentID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '404':
          description: No shipment found for the provided `shipmentID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: updates the shipment by ID
      description: > 
        Updates a shipment with given ID, and creates a new shipment 
        if one doesn't exist with given shipment ID.
      requestBody:
        description: Representation of all the data within a specific shipment.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Successfully updated shipment by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Content of request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404' :
          description: No shipment found for provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 

    patch:
      summary: partially updates the shipment by ID
      description: >
        Updates part of an existing shipment. Recieves any of a shipment 
        representation in the request body, and updates the shipment accordingly.
      requestBody:
        description: Representation of all the data within a specific shipment.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Successfully partially updated shipment by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid Content in Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No shipment found for the provided `shipmentID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes the shipment by ID
      description: >
        Deletes a shipment of a given shipment ID. 
        Returns a success message if request is successful.
      responses:
        '200':
          description: Successfully deleted the shipment corresponding with the provided shipment id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: No shipment found for the provided `shipmentID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /shipments/{shipmentID}/status:
    parameters:
      - name: shipmentID
        description: The unique identifier of shipment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ShipmentID'
    get:
      summary: Retrieve a shipment's status by ID
      description: Returns a shipments status (processing, shipped, delivered) given a valid shipment ID.
      responses:
        '200':
          description: The shipment's status corresponding to the provided `shipmentID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: No shipment found for the provided `shipmentID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shipments/items:
    get:
      summary: Retrieve a list of all items
      description: >
        Returns a list of all items on record in the warehouse.
        The items contain an item ID and item location within the warehouse.
      responses:
        '200':
          description: List of all items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '500':
          description: Unexpected Error
          content:
            appication/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new item
      description: >
        Adds an item to the database. Must contain an item ID and item location
        in the request body.
      requestBody:
        description: Defines an item's ID and location in warehouse
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Successfully added item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Content of request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shipments/items/{itemID}:
    parameters:
      - name: itemID
        description: the unique identifier of an item
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ItemID'
    get:
      summary: Retrieve item by 'itemID'
      description: >
        Returns an item based on a valid item ID. The item contains its
        location within the warehouse.
      responses:
        '200':
          description: Successfully found item for 'itemID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: No item found for provided 'itemID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an item by 'itemID'
      description: >
        Updates an item given a valid item ID or creates an item if 
        item does not exist in the database.
      requestBody:
        description: Defines an item's ID and location in warehouse
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Successfully updated item for 'itemID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Content of request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404' :
          description: Could not find item with provided 'itemID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an item by 'itemID'
      description: Remove an item from the database based on a valid item ID.
      responses:
        '200':
          description: Successfully deleted item for 'itemID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: No item found for provided 'itemID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shipments/{shipmentID}/items:
    parameters:
      - name: shipmentID
        description: The unique identifier of shipment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ShipmentID'
    get:
      summary: Retrieve a list of items by shipment ID
      description: Returns list of items of a specific shipment given a valid shipment ID.
      responses:
        '200':
          description: list of items for specific shipment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          description: no shipment found for provided 'shipmentID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add item to shipment by 'shipmentID'
      description: Add an item to the item list of a shipment given a valid shipment ID
      requestBody:
        description: Defines an item's ID and location in warehouse
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Successfully added 'Item' to list in 'Shipment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: No shipment found for the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                  
  /shipments/{shipmentID}/items/{itemID}:
    parameters:
      - name: shipmentID
        description: The unique identifier of shipment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ShipmentID'
      - name: itemID
        description: the unique identifier of an item
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ItemID'
    delete:
      summary: Delete item from shipment by 'shipmentID' and 'itemID'
      description: Delete an item based on a valid item ID from a shipment given a valid shipment ID.
      responses:
        '200':
          description: Successfully deleted 'Item' from item list in 'Shipment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: No item found for provided 'itemID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
components:
  schemas:
    ShipmentID:
      description: The unique identifier of a shipment
      type: string
      format: uuid

    ItemID:
      description: The unique identifier of an item
      type: string
      format: uuid

    StreetAddress:
      description: A shipping address
      type: object
      properties:
        line1:
          type: string
        line2:
          type: string
        line3:
          type: string
        city:
          type: string
        state:
          type: string
        zipcode:
          type: number
        country:
          type: string

    Status:
      description: The status of shipping (processing, shipped, or delivered)
      type: string
      enum:
        - processing
        - shipped
        - delivered
        
    Shipment:
      description: Representation of all the data within a specific shipment.
      type: object
      properties:
        shipmentID:
          description: The unique identifier of a shipment
          $ref: '#/components/schemas/ShipmentID'
        customerID:
          description: The unique identifier for the customer
          type: string
          format: uuid
        orderNumber:
          description: The identifier for the order (orders can be split into separate shipments)
          type: string
        receiveAddress:
          description: Address where the shipment is shipping to
          $ref: '#/components/schemas/StreetAddress'
        sendAddress:
          description: Address where the shipment is shipping from
          $ref: '#/components/schemas/StreetAddress'
        trackingNumber:
          description: The unique identifier to track a shipment
          type: number
        shippingCompany:
          description: The company that is shipping the package
          type: string
        status:
          description: The status of shipping (processing, shipped, or delivered)
          $ref: '#/components/schemas/Status'
        items:
          description: Contains which items are in the shipment
          type: array
          items:
            $ref: '#/components/schemas/Item'
        weight:
          description: Weight of the shipment
          type: number
      required:
        - shipmentID
        - customerID
        - orderNumber
        - receiveAddress
        - sendAddress
        - status
        - items
        - weight

    Item:
      description: Defines an item's ID and location in warehouse
      properties:
        itemID:
          $ref: '#/components/schemas/ItemID'
        itemLocation:
          description: human readable identifier for item location in warehouse
          type: string

    Error:
      description: Response when response is a 4xx or 5xx
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string

    Success:
      description: Response when successfully completes a request other than GET
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable success message
          type: string

  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-Api-Key
security:
  - ApiKey: []
